//a program is a list of statements, optionally entirely (empty program)
program: [statement ((";"|"\n") statement)*]

//TODO: can i make this just an expression and somehow differentiate
//  between an expr to evaluate and an expr in a definition?
?statement: terminal | definition | evaluate

//TODO: "@" behaves kind of like a class declaration
//TODO: allow params passed in to modify args of supertypes
terminal: "@" ID  -> terminal
  | "@" ID params -> parameterized_terminal

definition: ID "=" expr -> definition
  | ID params "=" expr  -> parameterized_definition

params: "[" param ("," param)* "]"
param: ID -> param
  | ID ":" expr -> param_with_req

evaluate: expr

//lower = higher precedence
?expr: conditional
  | satisfaction
  | dict
  | type
  // | any_literal
  // | nothing_literal
  | typecall
  | "(" expr ")"
  | tuple
  | duck
  | union
  | intersection

union: expr "|" expr
intersection: expr "&" expr
duck: expr "^" expr
tuple: "(" expr ("," expr)* ")"
dict: LBRACE (key_value ",")* RBRACE
?key_value: ID ":" expr
satisfaction: expr ">=" expr
conditional: expr "?" expr ":" expr

//TODO: type is kind of ambiguous with other things requiring just an identifier
typecall: ID "[" types "]"
types: (type|typecall) ("," (type|typecall))*
type: ANY | NOTHING | ID

COMMENT: /#.*/
TYPE: "type"
EXTENDS: "extends"
ANY: "any"
NOTHING: "nothing"
UNIT: "unit"
ID: /[a-zA-Z_][a-zA-Z0-9_]*/

//this is just to get tokens for dict key/values
LBRACE: "{"
RBRACE: "}"

%import common.WS
%ignore WS
%ignore ";"
%ignore COMMENT
