//a program is a list of statements, optionally entirely (empty program)
program: [statement ((";"|"\n") statement)*]

//TODO: can i make this just an expression and somehow differentiate
//  between an expr to evaluate and an expr in a definition?
?statement: terminal | definition | evaluate

terminal: "@" ID params

definition: ID params "=" expr

params: "[" ID ("," ID)* "]" |

evaluate: expr

?expr: union
  | intersection
  | tuple
  | conditional
  | "(" expr ")"
  | type

union: expr "|" expr
intersection: expr "&" expr
tuple: "(" expr ("," expr)* ")"
conditional: expr "?" expr ":" expr

//types in expressions can be nested eg A[B[C]]
type: ID | ID "[" type ("," type)* "]"

ID: /[a-zA-Z_][a-zA-Z0-9_]*/
COMMENT: /#.*/

%import common.WS
%ignore WS
%ignore ";"
%ignore COMMENT
